const { BigNumber } = require("@ethersproject/bignumber");
const { expect } = require("chai");
const { network } = require("hardhat");

const blockNumber = 12106275
// const account = '0x511ed30e9404cbec4bb06280395b74da5f876d47'
const oWETHUSDC = '0x58cea0b182381cde8c38cb16bf7f8260cba9997f' // oWETHUSDC/USDC-26MAR21-800P
const account = '0xca2DB2d21BC1AF848DA2b7CD423a29802371F399'
const signer = ethers.provider.getSigner(account)

const _1e18 = ethers.constants.WeiPerEther
const ZERO = BigNumber.from(0)

describe.skip('Purchase OToken from 0x exchange', function() {
    before('setup contracts', async function() {
        await network.provider.request({
            method: "hardhat_reset",
            params: [{
                forking: {
                    jsonRpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${process.env.ALCHEMY}`,
                    blockNumber
                }
            }]
        })
        await impersonateAccount(account)
    })


    it('purchase oToken (web3)', async function() {
        const tx = {
            from: account,
            to: '0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef',
            gas: 1000000,
            data: '0x8bc8efb300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f96b29cd9c0dfcb5ef041b66bb038457ad2624700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f96b29cd9c0dfcb5ef041b66bb038457ad2624700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000007dfbd10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000605c02f4000000000000000000000000000000000000000000000000000001786766f6aa00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000024f47261b000000000000000000000000058cea0b182381cde8c38cb16bf7f8260cba9997f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000421cd648e073738b9c16c376cfb92b3f40c3fd137209b9be33149982f2aeaf6ec6425be80bf16f5f3f70d3e9a7cefc3a197f7e90c0f120a10f935886c6444e274ae203000000000000000000000000000000000000000000000000000000000000'
        }
        console.log('getChainId', await web3.eth.getChainId())
        await web3.eth.sendTransaction(tx)
    })

    it('purchase oToken', async function() {
        const { order, makerAssetFillAmount, signature } = {
            "order": {
              "makerAddress": "0xf96b29cd9c0dfcb5ef041b66bb038457ad262470",
              "takerAddress": "0x0000000000000000000000000000000000000000",
              "feeRecipientAddress": "0xf96b29cd9c0dfcb5ef041b66bb038457ad262470",
              "senderAddress": "0x0000000000000000000000000000000000000000",
              "makerAssetAmount": "1000000000",
              "takerAssetAmount": "9107227",
              "makerFee": "0",
              "takerFee": "0",
              "expirationTimeSeconds": "1616593501",
              "salt": "1616593201229",
              "makerAssetData": "0xf47261b000000000000000000000000058cea0b182381cde8c38cb16bf7f8260cba9997f",
              "takerAssetData": "0xf47261b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "makerFeeAssetData": "0xf47261b00000000000000000000000000000000000000000000000000000000000000000",
              "takerFeeAssetData": "0xf47261b00000000000000000000000000000000000000000000000000000000000000000"
            },
            "makerAssetFillAmount": "100000000",
            "signature": "0x1be26f3b7eb094aab67cc834781242c63f9d2ba23e11d7d2a5848fb5f37c59fa6d3cfa98ad9eabff64ea62fddb91158ba641eaa3b9696dc9e7e3c9d8a52727865c03"
        }
        const exchange = await ethers.getContractAt('ZeroXExchangeInterface', '0x61935cbdd02287b511119ddb11aeb42f1593b7ef')
        // console.log(exchange.interface.encodeFunctionData('marketBuyOrdersFillOrKill', [ orders, makerAssetFillAmount, signatures ]))
        // await exchange.marketBuyOrdersFillOrKill(orders, makerAssetFillAmount, signatures)
        // console.log(exchange.interface.encodeFunctionData('fillOrder', [ order, makerAssetFillAmount, signature ]))
        // console.log({ order, makerAssetFillAmount, signature })
        console.log(exchange.interface.encodeFunctionData('fillOrder', [ order, '9107228', signature ]))
        await exchange.connect(signer).fillOrder(order, '9107227', signature, { gasLimit: 2000000 })
        // await exchange.connect(signer).fillOrder(order, makerAssetFillAmount, signature, { gasLimit: 2000000 })
    })
})

function impersonateAccount(account) {
    return network.provider.request({
        method: 'hardhat_impersonateAccount',
        params: [ account ]
    })
}
